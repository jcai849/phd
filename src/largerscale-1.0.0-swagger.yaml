openapi: 3.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/j-c/largerscale/1.0.0

info:
  title: largerscale REST API
  version: "1.0.0"
  description: The REST API for the largerscale system
  contact:
    name: Jason Cairns
    email: jason.cairns@auckland.ac.nz
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: Worker
    description: Operations involving moving data and computing with R
  - name: Location
    description: Location service operations indexing the components of the system

paths:
  /data/{data-ids}/call/{output-ids}:
    put:
      operationId: sendProcedure
      summary: Run procedures
      description: >
        The server will call the procedures over the associated arguments, emerging
        and aligning them, with possible recovery, as part of the computation
        object given in the request body.
        The result is stored under the output-ids, with the computations
        being stored under the data-ids provided as a parameter.
      parameters:
        - $ref: '#/components/parameters/DataIdentifiers'
        - $ref: '#/components/parameters/OutputIdentifiers'
      requestBody:
        description: The computations to be run
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Computations'
      responses:
        '202':
          description: >
            Accepted, with computation queued. Returning Chunk objects to
            reference the resulting chunks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chunks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
  /data/{data-ids}/value:
    parameters:
      - $ref: '#/components/parameters/DataIdentifiers'
    put:
      operationId: sendData
      summary: Replication of data to server
      description: >
        Replication of data, including initial data transfers as well as
        replication of computation objects. Requires informing the server
        of the identifier of the data.
      requestBody:
        description: The serialised data to be replicated.
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Data'
      responses:
        '204':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '507':
          description: Out of memory
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
    get:
      operationId: getData
      summary: Retrieve data from server
      description: >
        Attempt to retrieve data from the server. If the data is still
        being processed on the server, the header will be sent immediately,
        with the data following after becoming available.
      responses:
        '200':
          description: Success, sending data immediately
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '202':
          description: Success, data still pending; sending when available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
    head:
      operationId: getDataStatus
      summary: Determine data availability at a server directly
      description: >
        Determine data availability at a server directly, with the response
        code being the same as that of the equivalent GET request
      responses:
        '200':
          description: Success, all data available
        '202':
          description: Success, some data still pending
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Failure, some data not found
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
    delete:
      operationId: rmData
      summary: Delete data at server
      description: Delete data corresponding to data-ids at a server
      responses:
        '204':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
  /location-service:
    post:
      operationId: sendLocationServiceAddress
      summary: Inform node of the address of the location service to be used
      description: >
        Informs the node that the location service is located at the
        address given as the request body
      requestBody:
        description: The address of the location service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '204':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Worker
  /data/{data-ids}/locations:
    get:
      operationId: getLocation
      summary: Determine the locations of data
      description: >
        Attain the locations of the data referenced with the data-ids,
        at which the data may be retrieved.
      parameters:
        - $ref: '#/components/parameters/DataIdentifiers'
      responses:
        '303':
          description: Found, returning the locations containing the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
  /nodes:
    post:
      operationId: signalLocation
      summary: Signal node location availability
      description: >
        Informs the location service that a node is available for work,
        and seeks a new node identifier.
      requestBody:
        description: >
          The location of the node that is available for work and
          seeking association to a node identifier
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Success, returning a new node identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
    get:
      operationId: getNodes
      summary: Get listing of all node locations
      description: >
        Get all of the node locations and their identifiers known to the
        location service, either for replication of the location service,
        or for scheduling new computations.
      responses:
        '200':
          description: Success, returning an array of node identifiers and locations
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Nodes'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
  /nodes/{node-id}/data:
    get:
      operationId: getNodeDataIdentifiers
      summary: Get listing of data existing at a node
      description: >
        Get a full listing of all data identifiers existing at a particular node
      parameters:
        - $ref: '#/components/parameters/NodeIdentifier'
      responses:
        '200':
          description: Success, returning an array of data identifiers
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Identifiers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
  /nodes/{node-id}/location:
    get:
      operationId: getNodeLocation
      summary: Get node location
      description: Get location of the node specified with node-id
      parameters:
        - $ref: '#/components/parameters/NodeIdentifier'
      responses:
        '200':
          description: Success, returning location of node
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
  /nodes/{node-id}:
    delete:
      operationId: rmNode
      summary: Delete information associated with a node
      description: >
        Delete information associated with the node-id from the location service,
        killing the node if it is still live.
      parameters:
        - $ref: '#/components/parameters/NodeIdentifier'
      responses:
        '204':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location
  /nodes/{node-id}/{data-ids}:
    put:
      operationId: signalData
      summary: Signal data availability at node
      description: >
        Informs the location service that there is data available or
        being processed at the location of node-id.
      parameters:
        - $ref: '#/components/parameters/NodeIdentifier'
        - $ref: '#/components/parameters/DataIdentifiers'
      responses:
        '204':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - Location

components:
  parameters:
    DataIdentifiers:
      name: data-ids
      description: |
        An array of data identifiers to operate upon.
        All data must be available in order to carry out a successful
        operation, otherwise no operation is carried out.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Identifiers'
    OutputIdentifiers:
      name: output-ids
      description: |
        An array of data identifiers to store output of a call upon.
        Must respectively match the data-ids given for computations.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Identifiers'
    NodeIdentifier:
      name: node-id
      in: path
      required: true
      description: The identifier of the relevant node
      schema:
        $ref: '#/components/schemas/Identifier'
    DataIdentifier:
      name: data-id
      description: An identifier of data to operate upon.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Identifier'
  schemas:
    Location:
      description: The URI of a specific location, typically with IP address and port
      type: string
      format: uri
      example: 'http://127.0.0.1:3838'
    Locations:
      description: Set of locations associated with identifiers
      type: array
      minItems: 1
      items:
        type: object
        properties:
          identifier:
            $ref: '#/components/schemas/Identifier'
          locations:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/Location'
    Identifier:
      description: Identifier, in the form of a UUID
      type: string
      pattern: '[0-9a-fA-F]{8}\-([0-9a-fA-F]{4}\-){3}[0-9a-fA-F]{12}'
      minLength: 36
      maxLength: 36
      example: '07d3280b-26be-4940-8b21-27136df707b5'
    Identifiers:
      description: Set of identifiers
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/Identifier'
    Data:
      description: Set of serialised R data referenced by their identifiers
      type: array
      minItems: 1
      items:
        type: object
        required:
          - identifier
          - value
        properties:
          identifier:
            $ref: '#/components/schemas/Identifier'
          value:
            $ref: '#/components/schemas/SerializedRData'
    Nodes:
      description: Set of node locations referenced by their identifiers
      type: array
      minItems: 1
      items:
        type: object
        required:
          - identifier
          - location
        properties:
          identifier:
            $ref: '#/components/schemas/Identifier'
          location:
            $ref: '#/components/schemas/Location'
    Chunk:
      description: |
        Chunk object, including the identifier of the generating computation,
        as well as the identifier of the data resulting from the computation.
      type: object
      required:
        - computation-identifier
        - data-identifier
      properties:
        computation:
          $ref: '#/components/schemas/HyperData'
        data:
          $ref: '#/components/schemas/HyperData'
    HyperData:
      description: >
        HATEOAS driven RFC 5988 compliant links to data
      type: object
      properties:
        href:
          $ref: '#/components/schemas/Identifier'
        rel:
          type: string
          enum: ['data']
          example: data
        type:
          type: string
          enum: ['GET', 'PUT']
          example: GET
    Chunks:
      description: Set of chunks
      type: array
      minLength: 1
      items:
        $ref: '#/components/schemas/Chunk'
    Computation:
      description: >
        A computation object, which can be transferred, replicated and called.
      type: object
      required:
        - procedure
        - arguments
        - alignments
      properties:
        procedure:
          type: string
          minLength: 1
          example: 'rpart::rpart'
        arguments:
          $ref: '#/components/schemas/Arguments'
        alignments:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Alignment'
    Computations:
      description: >
        A set of computations to be run
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/Computation'
    Arguments:
      description: >
        Set of chunks to serve as arguments, associated with optional parameter names
      type: array
      minItems: 1
      items:
        type: object
        required:
          - parameter
          - chunk
        properties:
          parameter:
            type: string
            example: 'formula'
          chunk:
            $ref: '#/components/schemas/Chunk'
    Alignment:
      description: The indices with which to select data for the purpose of alignment
      type: object
      required:
        - start
        - length
      properties:
        start:
          type: integer
          format: int32
          minimum: 1
          example: 23
        length:
          type: integer
          format: int32
          minimum: 1
          example: 256
    SerializedRData:
      description: R data serialised according to some TBC protocol
      type: string
      format: binary
      example: '58 0a 00 00 00 03 00 04 00 05 00 03 05 00 00'
  responses:
    Success:
      description: Success
    BadRequest:
      description: Bad Request
    UnexpectedError:
      description: Unexpected Error.
    NotFound:
      description: Not found